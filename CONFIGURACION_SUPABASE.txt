// INSTRUCCIONES DE CONFIGURACIÓN PARA SUPABASE
// 
// 1. Ve a https://supabase.com y crea una cuenta
// 2. Crea un nuevo proyecto
// 3. Ve a Settings > API y copia la URL y la clave anon
// 4. Reemplaza los valores en supabase_service.dart
//
// EJEMPLO DE CONFIGURACIÓN:
//
// static const String supabaseUrl = 'https://tu-proyecto.supabase.co';
// static const String supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...';
//
// DESPUÉS EJECUTA EL SIGUIENTE SQL EN EL EDITOR SQL DE SUPABASE:

/*
-- Crear tabla de visitantes
CREATE TABLE visitors (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  name TEXT NOT NULL,
  reason TEXT NOT NULL,
  timestamp TIMESTAMPTZ NOT NULL,
  photo_url TEXT,
  user_id UUID REFERENCES auth.users(id) NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Habilitar RLS (Row Level Security)
ALTER TABLE visitors ENABLE ROW LEVEL SECURITY;

-- Crear política para que los usuarios solo vean sus propios visitantes
CREATE POLICY "Users can view own visitors" ON visitors
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own visitors" ON visitors
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own visitors" ON visitors
  FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete own visitors" ON visitors
  FOR DELETE USING (auth.uid() = user_id);

-- Crear bucket para fotos de visitantes
INSERT INTO storage.buckets (id, name, public) VALUES ('visitor-photos', 'visitor-photos', true);

-- Crear política para el bucket de fotos
CREATE POLICY "Public Access" ON storage.objects FOR SELECT USING (bucket_id = 'visitor-photos');
CREATE POLICY "Authenticated users can upload" ON storage.objects FOR INSERT WITH CHECK (bucket_id = 'visitor-photos' AND auth.role() = 'authenticated');
*/

// UNA VEZ CONFIGURADO SUPABASE, EJECUTA:
// flutter pub get
// flutter run
